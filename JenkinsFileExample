pipeline{//siempre inicia con esta palabra reservada
    agent any//define que tipo de agent se va a utilizar para ejecutar cada stage
    options{
        //Nativas de jenkins y otras proporcionadas por plugins
    }
    enviroment{//variables globales que se podran utilizar dentro de los stages
        VAR1 = 'Dragon'
    }
    
    stages{//segmentosque conforman el pipeline que tiene una o mas tareas que realizar
        stage('build'){
            enviroment{
                KEY = 'HOLA'//varialbe local del stage
            }
            steps{
                sh 'echo $VAR1'
            }
        }
        stage('Unit-Test'){
            enviroment{
                KEY = '1'
            }
            when{//con when podemos realizar una condicional para hacer que se ejecute o no el stage
                //si hay mas de dos expresiones, todas tienen que retornar verdadero para ejecutarse
                anyOf{//allOf
                    expression{key == '1'}
                }
            }
            input {//este segmento interrumpe el flujo del pipeline y pide una entrada a un usuario
                message "Should we continue?"
                ok "Yes, we should."
                submitter "alice,bob"
                parameters {
                    string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
                }
            }
            steps{
                echo "Hello, ${PERSON}, nice to meet you."
                script {//podemos ejecutar sentencias en el lenguaje Grovvy
                    def browsers = ['chrome', 'firefox']
                    for (int i = 0; i < browsers.size(); ++i) {
                        echo "Testing the ${browsers[i]} browser"
                    }
                }
            }
        }
        stage('Other-Test'){

        }
        stage('Deploy'){
            
        }

    }
    //lo definido dentro de post se ejecutara despues de haber ejecutado la seccion de stages, sin importar
    //el estado del build actual
    post{
        always{
            
            //se ejecuta siempre, no importando el estado en que termino el pipeline
        }
        changed{
            //se ejecuta si cambio de status el pipeline
        }
        fixed{
            //se ejecuta si el pipeline actual fue satisfactorio y el anterior fallo
        }
        regression{
            //se ejecuta si el pipeline actual fue
        }
        
    }
}
